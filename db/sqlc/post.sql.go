// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: post.sql

package db

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    owner_id,
    type,
    is_root_opinion,
    topic,
    description,
    caption,
    topic_id,
    set_id,
    category,
    base_opinion_id,
    post_image_url,
    link
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
) RETURNING id, timestamp, owner_id, type, is_root_opinion, votes, topic, description, caption, topic_id, set_id, category, base_opinion_id, post_image_url, link
`

type CreatePostParams struct {
	OwnerID       int64          `json:"owner_id"`
	Type          string         `json:"type"`
	IsRootOpinion sql.NullBool   `json:"is_root_opinion"`
	Topic         string         `json:"topic"`
	Description   sql.NullString `json:"description"`
	Caption       sql.NullString `json:"caption"`
	TopicID       sql.NullInt64  `json:"topic_id"`
	SetID         sql.NullInt64  `json:"set_id"`
	Category      string         `json:"category"`
	BaseOpinionID sql.NullInt64  `json:"base_opinion_id"`
	PostImageUrl  sql.NullString `json:"post_image_url"`
	Link          sql.NullString `json:"link"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.OwnerID,
		arg.Type,
		arg.IsRootOpinion,
		arg.Topic,
		arg.Description,
		arg.Caption,
		arg.TopicID,
		arg.SetID,
		arg.Category,
		arg.BaseOpinionID,
		arg.PostImageUrl,
		arg.Link,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Timestamp,
		&i.OwnerID,
		&i.Type,
		&i.IsRootOpinion,
		&i.Votes,
		&i.Topic,
		&i.Description,
		&i.Caption,
		&i.TopicID,
		&i.SetID,
		&i.Category,
		&i.BaseOpinionID,
		&i.PostImageUrl,
		&i.Link,
	)
	return i, err
}
